{
    "sourceFile": "js/emoji.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754973127720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754973232619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n     constructor() {\n         this.currentCategory = 'all';\n         this.allEmojis = [];\n         this.notificationTimer = null;\n+        this.searchTimeout = null; // 검색 디바운싱용\n     }\n \n     init() {\n         this.allEmojis = this.getAllEmojis();\n@@ -154,31 +155,131 @@\n         }\n     }\n \n     handleSearch(searchTerm) {\n-        searchTerm = searchTerm.toLowerCase();\n+        searchTerm = searchTerm.toLowerCase().trim();\n         \n         if (!searchTerm) {\n             if (this.currentCategory === 'all') {\n                 this.renderEmojis(this.allEmojis, true);\n             } else {\n                 this.renderEmojis(window.emojiData[this.currentCategory] || []);\n             }\n+            // 검색 결과 개수 숨기기\n+            this.showSearchResultCount(0, '');\n             return;\n         }\n \n         const emojiKeywords = window.emojiKeywords || {};\n-        let searchResults = [];\n         \n-        for (const emoji of this.allEmojis) {\n+        // 성능 최적화: 빈번한 검색을 위한 디바운싱\n+        if (this.searchTimeout) {\n+            clearTimeout(this.searchTimeout);\n+        }\n+        \n+        this.searchTimeout = setTimeout(() => {\n+            const searchResults = this.performSearch(searchTerm, emojiKeywords);\n+            this.renderEmojis(searchResults);\n+            this.showSearchResultCount(searchResults.length, searchTerm);\n+            \n+            // 검색 분석 로깅 (디버깅용)\n+            console.log(`검색어: \"${searchTerm}\", 결과: ${searchResults.length}개`);\n+        }, 150); // 150ms 디바운싱\n+    }\n+    \n+    performSearch(searchTerm, emojiKeywords) {\n+        const scoredResults = [];\n+        \n+        // 성능 최적화: 검색 대상을 현재 카테고리로 제한 (필요시)\n+        const searchPool = this.currentCategory === 'all' ? \n+            this.allEmojis : \n+            (window.emojiData[this.currentCategory] || []);\n+        \n+        for (const emoji of searchPool) {\n             const keywords = emojiKeywords[emoji] || [];\n-            if (keywords.some(keyword => keyword.includes(searchTerm))) {\n-                searchResults.push(emoji);\n+            let score = 0;\n+            let matched = false;\n+            let matchTypes = new Set(); // 매칭 타입을 추적\n+            \n+            for (let i = 0; i < keywords.length; i++) {\n+                const keyword = keywords[i].toLowerCase();\n+                \n+                // 완전 일치 (최고 점수)\n+                if (keyword === searchTerm) {\n+                    score += 150;\n+                    matched = true;\n+                    matchTypes.add('exact');\n+                } \n+                // 시작 부분 일치 (높은 점수)\n+                else if (keyword.startsWith(searchTerm)) {\n+                    score += 100;\n+                    matched = true;\n+                    matchTypes.add('start');\n+                }\n+                // 포함 (보통 점수)\n+                else if (keyword.includes(searchTerm)) {\n+                    score += 60;\n+                    matched = true;\n+                    matchTypes.add('contain');\n+                }\n+                \n+                // 첫 번째 키워드 매칭 시 보너스 점수\n+                if (i === 0 && matched) {\n+                    score += 30;\n+                }\n+                \n+                // 키워드 길이가 검색어와 비슷하면 보너스\n+                if (matched && Math.abs(keyword.length - searchTerm.length) <= 2) {\n+                    score += 20;\n+                }\n             }\n+            \n+            // 다양한 매칭 타입이 있으면 보너스 점수\n+            if (matchTypes.size > 1) {\n+                score += 25;\n+            }\n+            \n+            if (matched) {\n+                scoredResults.push({ emoji, score, matchTypes });\n+            }\n         }\n         \n-        this.renderEmojis(searchResults);\n+        // 점수 순으로 정렬 (높은 점수가 먼저)\n+        scoredResults.sort((a, b) => {\n+            if (b.score !== a.score) {\n+                return b.score - a.score;\n+            }\n+            // 점수가 같으면 매칭 타입 우선순위로 정렬\n+            if (a.matchTypes.has('exact') && !b.matchTypes.has('exact')) return -1;\n+            if (b.matchTypes.has('exact') && !a.matchTypes.has('exact')) return 1;\n+            if (a.matchTypes.has('start') && !b.matchTypes.has('start')) return -1;\n+            if (b.matchTypes.has('start') && !a.matchTypes.has('start')) return 1;\n+            return 0;\n+        });\n+        \n+        return scoredResults.map(result => result.emoji);\n     }\n+    \n+    showSearchResultCount(count, searchTerm) {\n+        // 검색 결과 개수를 표시할 요소가 있다면 업데이트\n+        const resultCount = document.getElementById('searchResultCount');\n+        if (resultCount) {\n+            if (count > 0) {\n+                resultCount.textContent = `\"${searchTerm}\" 검색 결과: ${count}개`;\n+                resultCount.style.display = 'block';\n+            } else {\n+                resultCount.textContent = `\"${searchTerm}\" 검색 결과가 없습니다.`;\n+                resultCount.style.display = 'block';\n+            }\n+        }\n+        \n+        // 검색어가 없으면 결과 개수 숨기기\n+        if (!searchTerm) {\n+            if (resultCount) {\n+                resultCount.style.display = 'none';\n+            }\n+        }\n+    }\n \n     renderEmojis(emojis, showDividers = false) {\n         const grid = document.getElementById('emojiGrid');\n         if (!grid) return;\n@@ -187,15 +288,18 @@\n         \n         if (showDividers && this.currentCategory === 'all') {\n             this.renderAllCategoriesWithDividers();\n         } else {\n+            // 성능 최적화: DocumentFragment 사용하여 DOM 조작 최소화\n+            const fragment = document.createDocumentFragment();\n             emojis.forEach(emoji => {\n                 const item = document.createElement('div');\n                 item.className = 'emoji-item';\n                 item.textContent = emoji;\n                 item.onclick = () => this.copyEmoji(emoji);\n-                grid.appendChild(item);\n+                fragment.appendChild(item);\n             });\n+            grid.appendChild(fragment);\n         }\n     }\n \n     renderAllCategoriesWithDividers() {\n@@ -214,28 +318,35 @@\n             'symbols': '기호',\n             'flags': '국기'\n         };\n \n+        // 성능 최적화: DocumentFragment 사용\n+        const fragment = document.createDocumentFragment();\n         let isFirst = true;\n+        \n         for (const category in window.emojiData) {\n             // 첫 번째 카테고리가 아닌 경우 구분자 추가\n             if (!isFirst) {\n                 const divider = document.createElement('div');\n                 divider.className = 'category-divider';\n                 divider.textContent = `광고 영역 - ${categoryNames[category] || category} 섹션`;\n-                grid.appendChild(divider);\n+                fragment.appendChild(divider);\n             }\n             isFirst = false;\n \n-            // 해당 카테고리의 이모지들 추가\n-            window.emojiData[category].forEach(emoji => {\n+            // 해당 카테고리의 이모지들 추가 - 배치로 처리\n+            const categoryEmojis = window.emojiData[category];\n+            categoryEmojis.forEach(emoji => {\n                 const item = document.createElement('div');\n                 item.className = 'emoji-item';\n                 item.textContent = emoji;\n                 item.onclick = () => this.copyEmoji(emoji);\n-                grid.appendChild(item);\n+                fragment.appendChild(item);\n             });\n         }\n+        \n+        // 한 번에 DOM에 추가\n+        grid.appendChild(fragment);\n     }\n \n     copyEmoji(emoji) {\n         // 터치 피드백\n"
                }
            ],
            "date": 1754973127720,
            "name": "Commit-0",
            "content": "// 이모지 관련 JavaScript\n\nclass EmojiManager {\n    constructor() {\n        this.currentCategory = 'all';\n        this.allEmojis = [];\n        this.notificationTimer = null;\n    }\n\n    init() {\n        this.allEmojis = this.getAllEmojis();\n        this.bindEvents();\n        this.renderEmojis(this.allEmojis, true);\n    }\n\n    bindEvents() {\n        // 카테고리 탭 클릭 이벤트\n        document.querySelectorAll('.tab').forEach(tab => {\n            tab.addEventListener('click', (e) => {\n                this.handleCategoryClick(e.target);\n            });\n        });\n\n        // 검색 기능\n        const searchInput = document.getElementById('searchInput');\n        if (searchInput) {\n            searchInput.addEventListener('input', (e) => {\n                this.handleSearch(e.target.value);\n            });\n        }\n\n        // 플로팅 박스 이벤트\n        this.bindFloatingBoxEvents();\n\n        // 터치 이벤트\n        this.bindTouchEvents();\n\n        // 화면 회전 및 리사이즈 이벤트\n        this.bindResizeEvents();\n    }\n\n    bindFloatingBoxEvents() {\n        const copyAllBtn = document.getElementById('copyAllBtn');\n        const clearBtn = document.getElementById('clearBtn');\n\n        if (copyAllBtn) {\n            copyAllBtn.addEventListener('click', () => {\n                this.copyAllEmojis();\n            });\n        }\n\n        if (clearBtn) {\n            clearBtn.addEventListener('click', () => {\n                this.clearCollector();\n            });\n        }\n    }\n\n    bindTouchEvents() {\n        let touchStartY = 0;\n        let isScrolling = false;\n\n        document.addEventListener('touchstart', (e) => {\n            if (e.target.classList.contains('emoji-item')) {\n                touchStartY = e.touches[0].clientY;\n                isScrolling = false;\n            }\n        }, { passive: false });\n\n        document.addEventListener('touchmove', (e) => {\n            if (e.target.classList.contains('emoji-item')) {\n                const touchY = e.touches[0].clientY;\n                const deltaY = Math.abs(touchY - touchStartY);\n                \n                if (deltaY > 10) {\n                    isScrolling = true;\n                }\n            }\n        }, { passive: false });\n\n        document.addEventListener('touchend', (e) => {\n            if (e.target.classList.contains('emoji-item') && !isScrolling) {\n                e.preventDefault();\n                const emoji = e.target.textContent;\n                this.copyEmoji(emoji);\n            }\n        }, { passive: false });\n\n        // 모바일에서 더블탭 줌 방지\n        let lastTouchEnd = 0;\n        document.addEventListener('touchend', (e) => {\n            const now = new Date().getTime();\n            if (now - lastTouchEnd <= 300) {\n                e.preventDefault();\n            }\n            lastTouchEnd = now;\n        }, false);\n\n        // iOS Safari에서 바운스 스크롤 방지\n        document.addEventListener('touchmove', (e) => {\n            if (e.target.closest('.floating-emoji-box') && \n                !e.target.closest('.emoji-collector')) {\n                e.preventDefault();\n            }\n        }, { passive: false });\n    }\n\n    bindResizeEvents() {\n        // 화면 회전 감지 및 레이아웃 재조정\n        window.addEventListener('orientationchange', () => {\n            setTimeout(() => {\n                if (this.currentCategory === 'all') {\n                    this.renderEmojis(this.allEmojis, true);\n                } else {\n                    this.renderEmojis(window.emojiData[this.currentCategory] || []);\n                }\n            }, 500);\n        });\n\n        // 뷰포트 높이 조정\n        this.setViewportHeight();\n        window.addEventListener('resize', () => {\n            this.setViewportHeight();\n        });\n    }\n\n    setViewportHeight() {\n        const vh = window.innerHeight * 0.01;\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\n    }\n\n    getAllEmojis() {\n        const all = [];\n        if (window.emojiData) {\n            for (const category in window.emojiData) {\n                all.push(...window.emojiData[category]);\n            }\n        }\n        return all;\n    }\n\n    handleCategoryClick(tab) {\n        // 활성 탭 변경\n        document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));\n        tab.classList.add('active');\n        \n        // 카테고리 변경\n        this.currentCategory = tab.dataset.category;\n        \n        if (this.currentCategory === 'all') {\n            this.renderEmojis(this.allEmojis, true);\n        } else {\n            this.renderEmojis(window.emojiData[this.currentCategory] || []);\n        }\n    }\n\n    handleSearch(searchTerm) {\n        searchTerm = searchTerm.toLowerCase();\n        \n        if (!searchTerm) {\n            if (this.currentCategory === 'all') {\n                this.renderEmojis(this.allEmojis, true);\n            } else {\n                this.renderEmojis(window.emojiData[this.currentCategory] || []);\n            }\n            return;\n        }\n\n        const emojiKeywords = window.emojiKeywords || {};\n        let searchResults = [];\n        \n        for (const emoji of this.allEmojis) {\n            const keywords = emojiKeywords[emoji] || [];\n            if (keywords.some(keyword => keyword.includes(searchTerm))) {\n                searchResults.push(emoji);\n            }\n        }\n        \n        this.renderEmojis(searchResults);\n    }\n\n    renderEmojis(emojis, showDividers = false) {\n        const grid = document.getElementById('emojiGrid');\n        if (!grid) return;\n        \n        grid.innerHTML = '';\n        \n        if (showDividers && this.currentCategory === 'all') {\n            this.renderAllCategoriesWithDividers();\n        } else {\n            emojis.forEach(emoji => {\n                const item = document.createElement('div');\n                item.className = 'emoji-item';\n                item.textContent = emoji;\n                item.onclick = () => this.copyEmoji(emoji);\n                grid.appendChild(item);\n            });\n        }\n    }\n\n    renderAllCategoriesWithDividers() {\n        const grid = document.getElementById('emojiGrid');\n        const categoryNames = {\n            'people': '사람·표정',\n            'hands': '손',\n            'races': '인종',\n            'jobs': '직업',\n            'love': '사랑',\n            'nature': '동물·자연',\n            'food': '음식·음료',\n            'activities': '활동',\n            'travel': '여행·장소',\n            'objects': '사물',\n            'symbols': '기호',\n            'flags': '국기'\n        };\n\n        let isFirst = true;\n        for (const category in window.emojiData) {\n            // 첫 번째 카테고리가 아닌 경우 구분자 추가\n            if (!isFirst) {\n                const divider = document.createElement('div');\n                divider.className = 'category-divider';\n                divider.textContent = `광고 영역 - ${categoryNames[category] || category} 섹션`;\n                grid.appendChild(divider);\n            }\n            isFirst = false;\n\n            // 해당 카테고리의 이모지들 추가\n            window.emojiData[category].forEach(emoji => {\n                const item = document.createElement('div');\n                item.className = 'emoji-item';\n                item.textContent = emoji;\n                item.onclick = () => this.copyEmoji(emoji);\n                grid.appendChild(item);\n            });\n        }\n    }\n\n    copyEmoji(emoji) {\n        // 터치 피드백\n        if (navigator.vibrate) {\n            navigator.vibrate(50);\n        }\n        \n        navigator.clipboard.writeText(emoji).then(() => {\n            this.showCopyNotification(emoji);\n            this.addToCollector(emoji);\n        }).catch(() => {\n            // 클립보드 API가 실패한 경우 대체 방법\n            this.fallbackCopyTextToClipboard(emoji);\n            this.showCopyNotification(emoji);\n            this.addToCollector(emoji);\n        });\n    }\n\n    fallbackCopyTextToClipboard(text) {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n        textArea.style.top = \"0\";\n        textArea.style.left = \"0\";\n        textArea.style.position = \"fixed\";\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        try {\n            document.execCommand('copy');\n        } catch (err) {\n            console.error('Fallback: 복사 실패', err);\n        }\n        \n        document.body.removeChild(textArea);\n    }\n\n    addToCollector(emoji) {\n        const collector = document.getElementById('emojiCollector');\n        if (!collector) return;\n        \n        if (collector.hasAttribute('data-placeholder')) {\n            collector.textContent = emoji;\n            collector.removeAttribute('data-placeholder');\n        } else {\n            collector.textContent += emoji;\n        }\n    }\n\n    showCopyNotification(copiedEmoji) {\n        const notification = document.getElementById('copyNotification');\n        if (!notification) return;\n        \n        notification.textContent = `이모지가 복사되었습니다! ${copiedEmoji}`;\n        notification.classList.add('show');\n        \n        if (this.notificationTimer) {\n            clearTimeout(this.notificationTimer);\n        }\n\n        this.notificationTimer = setTimeout(() => {\n            notification.classList.remove('show');\n        }, 2000);\n    }\n\n    copyAllEmojis() {\n        const collector = document.getElementById('emojiCollector');\n        if (!collector) return;\n        \n        const allEmojisText = collector.textContent;\n        if (allEmojisText && allEmojisText !== '이모지를 클릭하세요') {\n            // 터치 피드백\n            if (navigator.vibrate) {\n                navigator.vibrate([100, 50, 100]);\n            }\n            \n            navigator.clipboard.writeText(allEmojisText).then(() => {\n                this.showCopyNotification(`복사완료! ${allEmojisText}`);\n            }).catch(() => {\n                this.fallbackCopyTextToClipboard(allEmojisText);\n                this.showCopyNotification(`복사완료! ${allEmojisText}`);\n            });\n        }\n    }\n\n    clearCollector() {\n        const collector = document.getElementById('emojiCollector');\n        if (!collector) return;\n        \n        collector.textContent = '이모지를 클릭하세요';\n        collector.setAttribute('data-placeholder', 'true');\n    }\n}\n\n// 전역에서 사용할 수 있도록 노출\nwindow.EmojiManager = EmojiManager;"
        }
    ]
}