{
    "sourceFile": "js/navigation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754973127719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754973127719,
            "name": "Commit-0",
            "content": "// 네비게이션 관련 JavaScript\n\nclass Navigation {\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        this.bindEvents();\n    }\n\n    bindEvents() {\n        // 상단 네비게이션 탭 클릭 이벤트\n        document.querySelectorAll('.nav-item').forEach(navItem => {\n            navItem.addEventListener('click', (e) => {\n                this.handleNavClick(e.target);\n            });\n        });\n    }\n\n    async handleNavClick(navItem) {\n        // 활성 탭 변경\n        document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));\n        navItem.classList.add('active');\n        \n        const contentType = navItem.dataset.type;\n        \n        // 페이지별 컨텐츠 로딩\n        await this.loadPageContent(contentType);\n        \n        // 카테고리 탭과 검색 박스 표시/숨기기\n        this.toggleEmojiFeatures(contentType === 'emoji');\n    }\n\n    async loadPageContent(contentType) {\n        const contentContainer = document.querySelector('.main-section-content');\n        \n        if (!contentContainer) {\n            console.error('메인 컨텐츠 컨테이너를 찾을 수 없습니다.');\n            return;\n        }\n\n        try {\n            // 페이지 파일 로딩\n            const response = await fetch(`pages/${contentType}.html`);\n            if (response.ok) {\n                const html = await response.text();\n                contentContainer.innerHTML = html;\n                \n                // 페이지별 초기화\n                if (contentType === 'emoji' && window.EmojiManager && window.emojiData) {\n                    // 이모지 페이지 - 이모지 관리자 초기화\n                    const emojiManager = new window.EmojiManager();\n                    emojiManager.init();\n                } else if (contentType === 'description') {\n                    // 이모지 설명 페이지 - script 태그 실행\n                    this.executePageScripts(contentContainer);\n                }\n            } else {\n                // 파일이 없으면 기본 빈 컨텐츠 표시\n                contentContainer.innerHTML = this.getDefaultContent(contentType);\n            }\n        } catch (error) {\n            console.error('페이지 로딩 실패:', error);\n            contentContainer.innerHTML = this.getDefaultContent(contentType);\n        }\n    }\n\n    getDefaultContent(contentType) {\n        const titles = {\n            emoji: '이모지',\n            description: '이모지 설명',\n            special: '특수문자',\n            news: '뉴스'\n        };\n\n        return `\n            <div class=\"empty-content\">\n                <p>${titles[contentType] || contentType} 페이지 준비 중입니다.</p>\n            </div>\n        `;\n    }\n\n    toggleEmojiFeatures(show) {\n        // 이모지 페이지가 아닐 때는 이 기능들이 페이지 HTML에 포함되지 않으므로\n        // 여기서 별도로 숨길 필요가 없습니다.\n        // 각 페이지 HTML에서 필요한 요소들을 포함하고 있습니다.\n    }\n\n    executePageScripts(container) {\n        // 동적으로 로드된 페이지의 script 태그들을 실행\n        const scripts = container.querySelectorAll('script');\n        scripts.forEach(script => {\n            try {\n                if (script.src) {\n                    // 외부 스크립트는 스킵 (이미 로드된 것으로 가정)\n                    return;\n                } else {\n                    // 인라인 스크립트를 직접 실행\n                    const scriptFunction = new Function(script.textContent);\n                    scriptFunction();\n                }\n            } catch (error) {\n                console.error('스크립트 실행 오류:', error);\n            }\n        });\n    }\n}\n\n// 전역에서 사용할 수 있도록 노출\nwindow.Navigation = Navigation;"
        }
    ]
}